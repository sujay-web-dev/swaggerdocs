openapi: 3.0.0
info:
  title: Swagger API Documentation.
  description: API Documentation for the Project
  version: 1.1.0
  contact:
    email: sujaywebdev@gmail.com
    url: "https://sujayweb.dev"

# servers:
#   - url: "http://localhost:4000/api/v1"
#     description: for local host - Secure
#   - url: "https://localhost:4000/api/v1"
#     description: for local host - Regular

servers:
  - url: "{protocol}://localhost:4000/api/{version}"
    description: for local host - Secure
    variables:
      version:
        enum:
          - v1
          - v2
        default: v1
      protocol:
        enum:
          - http
          - https
        default: http

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: token

    BearerAuth:
      type: http
      scheme: bearer

paths:
  /web3:
    get:
      tags:
        - String
      summary: returns a greet message from WEB3
      responses:
        200:
          description: All Good API call success
          content:
            application/json:
              schema:
                type: string
                example: "myString"
        400:
          description: Bad Request
        500:
          description: internal server error

  /web3object:
    get:
      tags:
        - Object
      summary: returns a Blockchain Course
      responses:
        200:
          description: All Good API call success
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  price:
                    type: number
        400:
          description: Bad Request
        500:
          description: internal server error

  /courses:
    get:
      tags:
        - Array
      summary: returns ALL Course
      responses:
        200:
          description: All Good , API call success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    price:
                      type: number
        400:
          description: Bad Request
        500:
          description: internal server error

  /mycourses/{courseId}:
    get:
      tags:
        - String
      summary: returns Course based on Request ID
      parameters:
        - name: courseId
          in: path
          required: true
          default: 22
          schema:
            type: string
      responses:
        200:
          description: All Good , API call success
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  price:
                    type: number
        400:
          description: Bad Request
        500:
          description: internal server error

  /addCourse:
    post:
      tags:
        - String
      summary: Adds a new course to existing courses
      consumes:
        - application/json
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                name:
                  type: string
                price:
                  type: number
      responses:
        200:
          description: All Good , API call success
          content:
            application/json:
              schema:
                type: boolean
        400:
          description: Bad Request
        500:
          description: internal server error

  /coursequery:
    get:
      tags:
        - String
      summary: Fetch Query in URL
      parameters:
        - name: location
          in: query
          required: true
          schema:
            type: string
            enum: [bangalore, New York, Bitcoin]
        - name: device
          in: query
          required: true
          schema:
            type: string
            enum: [web 1, web 2, web 3]
      responses:
        200:
          description: All Good , API call success
          content:
            application/json:
              schema:
                type: object
                properties:
                  location:
                    type: string
                  device:
                    type: string
        400:
          description: Bad Request
        500:
          description: internal server error
